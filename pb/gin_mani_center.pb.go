// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: gin_mani_center.proto

package pb_mani

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Base *Base `protobuf:"bytes,255,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *AddRuleReq) Reset() {
	*x = AddRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRuleReq) ProtoMessage() {}

func (x *AddRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRuleReq.ProtoReflect.Descriptor instead.
func (*AddRuleReq) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{0}
}

func (x *AddRuleReq) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *AddRuleReq) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type AddRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *AddRuleResp) Reset() {
	*x = AddRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRuleResp) ProtoMessage() {}

func (x *AddRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRuleResp.ProtoReflect.Descriptor instead.
func (*AddRuleResp) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{1}
}

func (x *AddRuleResp) GetBaseResp() *BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type GetRuleByRuleTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType RuleType `protobuf:"varint,1,opt,name=rule_type,json=ruleType,proto3,enum=pb_mani.RuleType" json:"rule_type,omitempty"`
	PageNo   int64    `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Base     *Base    `protobuf:"bytes,255,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *GetRuleByRuleTypeReq) Reset() {
	*x = GetRuleByRuleTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleByRuleTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByRuleTypeReq) ProtoMessage() {}

func (x *GetRuleByRuleTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByRuleTypeReq.ProtoReflect.Descriptor instead.
func (*GetRuleByRuleTypeReq) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{2}
}

func (x *GetRuleByRuleTypeReq) GetRuleType() RuleType {
	if x != nil {
		return x.RuleType
	}
	return RuleType_unknown_rule_type
}

func (x *GetRuleByRuleTypeReq) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetRuleByRuleTypeReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRuleByRuleTypeReq) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type GetRuleByRuleTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleList []*Rule     `protobuf:"bytes,1,rep,name=rule_list,json=ruleList,proto3" json:"rule_list,omitempty"`
	Page     *PageStruct `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	BaseResp *BaseResp   `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *GetRuleByRuleTypeResp) Reset() {
	*x = GetRuleByRuleTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleByRuleTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByRuleTypeResp) ProtoMessage() {}

func (x *GetRuleByRuleTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByRuleTypeResp.ProtoReflect.Descriptor instead.
func (*GetRuleByRuleTypeResp) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{3}
}

func (x *GetRuleByRuleTypeResp) GetRuleList() []*Rule {
	if x != nil {
		return x.RuleList
	}
	return nil
}

func (x *GetRuleByRuleTypeResp) GetPage() *PageStruct {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetRuleByRuleTypeResp) GetBaseResp() *BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type GetRuleByConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId      string      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	User        string      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"` // 规则发起者(可以是用户或者系统)
	RuleType    RuleType    `protobuf:"varint,3,opt,name=rule_type,json=ruleType,proto3,enum=pb_mani.RuleType" json:"rule_type,omitempty"`
	RuleState   RuleState   `protobuf:"varint,4,opt,name=rule_state,json=ruleState,proto3,enum=pb_mani.RuleState" json:"rule_state,omitempty"`
	ExecuteType ExecuteType `protobuf:"varint,5,opt,name=execute_type,json=executeType,proto3,enum=pb_mani.ExecuteType" json:"execute_type,omitempty"` // 是否立刻执行
	Base        *Base       `protobuf:"bytes,255,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *GetRuleByConditionReq) Reset() {
	*x = GetRuleByConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleByConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByConditionReq) ProtoMessage() {}

func (x *GetRuleByConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByConditionReq.ProtoReflect.Descriptor instead.
func (*GetRuleByConditionReq) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{4}
}

func (x *GetRuleByConditionReq) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *GetRuleByConditionReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetRuleByConditionReq) GetRuleType() RuleType {
	if x != nil {
		return x.RuleType
	}
	return RuleType_unknown_rule_type
}

func (x *GetRuleByConditionReq) GetRuleState() RuleState {
	if x != nil {
		return x.RuleState
	}
	return RuleState_unknown_rule_state
}

func (x *GetRuleByConditionReq) GetExecuteType() ExecuteType {
	if x != nil {
		return x.ExecuteType
	}
	return ExecuteType_unknown_exec_type
}

func (x *GetRuleByConditionReq) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type GetRuleByConditionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules    map[string]*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BaseResp *BaseResp        `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *GetRuleByConditionResp) Reset() {
	*x = GetRuleByConditionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleByConditionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByConditionResp) ProtoMessage() {}

func (x *GetRuleByConditionResp) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByConditionResp.ProtoReflect.Descriptor instead.
func (*GetRuleByConditionResp) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{5}
}

func (x *GetRuleByConditionResp) GetRules() map[string]*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *GetRuleByConditionResp) GetBaseResp() *BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type UpdateRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId      string      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleType    RuleType    `protobuf:"varint,2,opt,name=rule_type,json=ruleType,proto3,enum=pb_mani.RuleType" json:"rule_type,omitempty"`
	RuleState   RuleState   `protobuf:"varint,3,opt,name=rule_state,json=ruleState,proto3,enum=pb_mani.RuleState" json:"rule_state,omitempty"`
	ExecuteType ExecuteType `protobuf:"varint,4,opt,name=execute_type,json=executeType,proto3,enum=pb_mani.ExecuteType" json:"execute_type,omitempty"`
	DescText    string      `protobuf:"bytes,5,opt,name=desc_text,json=descText,proto3" json:"desc_text,omitempty"`       // 文字描述
	SourceUrl   string      `protobuf:"bytes,6,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`    // 图片链接/地址
	SourceName  string      `protobuf:"bytes,7,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"` //图片名字
	SourceState FileState   `protobuf:"varint,8,opt,name=source_state,json=sourceState,proto3,enum=pb_mani.FileState" json:"source_state,omitempty"`
	Base        *Base       `protobuf:"bytes,255,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *UpdateRuleReq) Reset() {
	*x = UpdateRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleReq) ProtoMessage() {}

func (x *UpdateRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleReq.ProtoReflect.Descriptor instead.
func (*UpdateRuleReq) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRuleReq) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *UpdateRuleReq) GetRuleType() RuleType {
	if x != nil {
		return x.RuleType
	}
	return RuleType_unknown_rule_type
}

func (x *UpdateRuleReq) GetRuleState() RuleState {
	if x != nil {
		return x.RuleState
	}
	return RuleState_unknown_rule_state
}

func (x *UpdateRuleReq) GetExecuteType() ExecuteType {
	if x != nil {
		return x.ExecuteType
	}
	return ExecuteType_unknown_exec_type
}

func (x *UpdateRuleReq) GetDescText() string {
	if x != nil {
		return x.DescText
	}
	return ""
}

func (x *UpdateRuleReq) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *UpdateRuleReq) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *UpdateRuleReq) GetSourceState() FileState {
	if x != nil {
		return x.SourceState
	}
	return FileState_unknown_file_state
}

func (x *UpdateRuleReq) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type UpdateRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *UpdateRuleResp) Reset() {
	*x = UpdateRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleResp) ProtoMessage() {}

func (x *UpdateRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleResp.ProtoReflect.Descriptor instead.
func (*UpdateRuleResp) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRuleResp) GetBaseResp() *BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type ExecuteRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Base *Base `protobuf:"bytes,255,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *ExecuteRuleReq) Reset() {
	*x = ExecuteRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRuleReq) ProtoMessage() {}

func (x *ExecuteRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRuleReq.ProtoReflect.Descriptor instead.
func (*ExecuteRuleReq) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteRuleReq) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *ExecuteRuleReq) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type ExecuteRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   string    `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	BaseResp *BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *ExecuteRuleResp) Reset() {
	*x = ExecuteRuleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gin_mani_center_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRuleResp) ProtoMessage() {}

func (x *ExecuteRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_gin_mani_center_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRuleResp.ProtoReflect.Descriptor instead.
func (*ExecuteRuleResp) Descriptor() ([]byte, []int) {
	return file_gin_mani_center_proto_rawDescGZIP(), []int{9}
}

func (x *ExecuteRuleResp) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecuteRuleResp) GetBaseResp() *BaseResp {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

var File_gin_mani_center_proto protoreflect.FileDescriptor

var file_gin_mani_center_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18,
	0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x09,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xd4, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x47, 0x0a, 0x0a, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x63, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x5b, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf4, 0x02, 0x0a,
	0x10, 0x47, 0x69, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x61, 0x6e, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gin_mani_center_proto_rawDescOnce sync.Once
	file_gin_mani_center_proto_rawDescData = file_gin_mani_center_proto_rawDesc
)

func file_gin_mani_center_proto_rawDescGZIP() []byte {
	file_gin_mani_center_proto_rawDescOnce.Do(func() {
		file_gin_mani_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_gin_mani_center_proto_rawDescData)
	})
	return file_gin_mani_center_proto_rawDescData
}

var file_gin_mani_center_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gin_mani_center_proto_goTypes = []interface{}{
	(*AddRuleReq)(nil),             // 0: pb_mani.AddRuleReq
	(*AddRuleResp)(nil),            // 1: pb_mani.AddRuleResp
	(*GetRuleByRuleTypeReq)(nil),   // 2: pb_mani.GetRuleByRuleTypeReq
	(*GetRuleByRuleTypeResp)(nil),  // 3: pb_mani.GetRuleByRuleTypeResp
	(*GetRuleByConditionReq)(nil),  // 4: pb_mani.GetRuleByConditionReq
	(*GetRuleByConditionResp)(nil), // 5: pb_mani.GetRuleByConditionResp
	(*UpdateRuleReq)(nil),          // 6: pb_mani.UpdateRuleReq
	(*UpdateRuleResp)(nil),         // 7: pb_mani.UpdateRuleResp
	(*ExecuteRuleReq)(nil),         // 8: pb_mani.ExecuteRuleReq
	(*ExecuteRuleResp)(nil),        // 9: pb_mani.ExecuteRuleResp
	nil,                            // 10: pb_mani.GetRuleByConditionResp.RulesEntry
	(*Rule)(nil),                   // 11: pb_mani.Rule
	(*Base)(nil),                   // 12: pb_mani.Base
	(*BaseResp)(nil),               // 13: pb_mani.BaseResp
	(RuleType)(0),                  // 14: pb_mani.RuleType
	(*PageStruct)(nil),             // 15: pb_mani.PageStruct
	(RuleState)(0),                 // 16: pb_mani.RuleState
	(ExecuteType)(0),               // 17: pb_mani.ExecuteType
	(FileState)(0),                 // 18: pb_mani.FileState
}
var file_gin_mani_center_proto_depIdxs = []int32{
	11, // 0: pb_mani.AddRuleReq.rule:type_name -> pb_mani.Rule
	12, // 1: pb_mani.AddRuleReq.base:type_name -> pb_mani.Base
	13, // 2: pb_mani.AddRuleResp.base_resp:type_name -> pb_mani.BaseResp
	14, // 3: pb_mani.GetRuleByRuleTypeReq.rule_type:type_name -> pb_mani.RuleType
	12, // 4: pb_mani.GetRuleByRuleTypeReq.base:type_name -> pb_mani.Base
	11, // 5: pb_mani.GetRuleByRuleTypeResp.rule_list:type_name -> pb_mani.Rule
	15, // 6: pb_mani.GetRuleByRuleTypeResp.page:type_name -> pb_mani.PageStruct
	13, // 7: pb_mani.GetRuleByRuleTypeResp.base_resp:type_name -> pb_mani.BaseResp
	14, // 8: pb_mani.GetRuleByConditionReq.rule_type:type_name -> pb_mani.RuleType
	16, // 9: pb_mani.GetRuleByConditionReq.rule_state:type_name -> pb_mani.RuleState
	17, // 10: pb_mani.GetRuleByConditionReq.execute_type:type_name -> pb_mani.ExecuteType
	12, // 11: pb_mani.GetRuleByConditionReq.base:type_name -> pb_mani.Base
	10, // 12: pb_mani.GetRuleByConditionResp.rules:type_name -> pb_mani.GetRuleByConditionResp.RulesEntry
	13, // 13: pb_mani.GetRuleByConditionResp.base_resp:type_name -> pb_mani.BaseResp
	14, // 14: pb_mani.UpdateRuleReq.rule_type:type_name -> pb_mani.RuleType
	16, // 15: pb_mani.UpdateRuleReq.rule_state:type_name -> pb_mani.RuleState
	17, // 16: pb_mani.UpdateRuleReq.execute_type:type_name -> pb_mani.ExecuteType
	18, // 17: pb_mani.UpdateRuleReq.source_state:type_name -> pb_mani.FileState
	12, // 18: pb_mani.UpdateRuleReq.base:type_name -> pb_mani.Base
	13, // 19: pb_mani.UpdateRuleResp.base_resp:type_name -> pb_mani.BaseResp
	11, // 20: pb_mani.ExecuteRuleReq.rule:type_name -> pb_mani.Rule
	12, // 21: pb_mani.ExecuteRuleReq.base:type_name -> pb_mani.Base
	13, // 22: pb_mani.ExecuteRuleResp.base_resp:type_name -> pb_mani.BaseResp
	11, // 23: pb_mani.GetRuleByConditionResp.RulesEntry.value:type_name -> pb_mani.Rule
	0,  // 24: pb_mani.GinCenterService.AddRule:input_type -> pb_mani.AddRuleReq
	2,  // 25: pb_mani.GinCenterService.GetRuleByRuleType:input_type -> pb_mani.GetRuleByRuleTypeReq
	4,  // 26: pb_mani.GinCenterService.GetRuleByCondition:input_type -> pb_mani.GetRuleByConditionReq
	6,  // 27: pb_mani.GinCenterService.UpdateRule:input_type -> pb_mani.UpdateRuleReq
	8,  // 28: pb_mani.GinCenterService.ExecuteRule:input_type -> pb_mani.ExecuteRuleReq
	1,  // 29: pb_mani.GinCenterService.AddRule:output_type -> pb_mani.AddRuleResp
	3,  // 30: pb_mani.GinCenterService.GetRuleByRuleType:output_type -> pb_mani.GetRuleByRuleTypeResp
	5,  // 31: pb_mani.GinCenterService.GetRuleByCondition:output_type -> pb_mani.GetRuleByConditionResp
	7,  // 32: pb_mani.GinCenterService.UpdateRule:output_type -> pb_mani.UpdateRuleResp
	9,  // 33: pb_mani.GinCenterService.ExecuteRule:output_type -> pb_mani.ExecuteRuleResp
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_gin_mani_center_proto_init() }
func file_gin_mani_center_proto_init() {
	if File_gin_mani_center_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gin_mani_center_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleByRuleTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleByRuleTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleByConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleByConditionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gin_mani_center_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRuleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gin_mani_center_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gin_mani_center_proto_goTypes,
		DependencyIndexes: file_gin_mani_center_proto_depIdxs,
		MessageInfos:      file_gin_mani_center_proto_msgTypes,
	}.Build()
	File_gin_mani_center_proto = out.File
	file_gin_mani_center_proto_rawDesc = nil
	file_gin_mani_center_proto_goTypes = nil
	file_gin_mani_center_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GinCenterServiceClient is the client API for GinCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GinCenterServiceClient interface {
	AddRule(ctx context.Context, in *AddRuleReq, opts ...grpc.CallOption) (*AddRuleResp, error)
	GetRuleByRuleType(ctx context.Context, in *GetRuleByRuleTypeReq, opts ...grpc.CallOption) (*GetRuleByRuleTypeResp, error)
	GetRuleByCondition(ctx context.Context, in *GetRuleByConditionReq, opts ...grpc.CallOption) (*GetRuleByConditionResp, error)
	UpdateRule(ctx context.Context, in *UpdateRuleReq, opts ...grpc.CallOption) (*UpdateRuleResp, error)
	ExecuteRule(ctx context.Context, in *ExecuteRuleReq, opts ...grpc.CallOption) (*ExecuteRuleResp, error)
}

type ginCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGinCenterServiceClient(cc grpc.ClientConnInterface) GinCenterServiceClient {
	return &ginCenterServiceClient{cc}
}

func (c *ginCenterServiceClient) AddRule(ctx context.Context, in *AddRuleReq, opts ...grpc.CallOption) (*AddRuleResp, error) {
	out := new(AddRuleResp)
	err := c.cc.Invoke(ctx, "/pb_mani.GinCenterService/AddRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ginCenterServiceClient) GetRuleByRuleType(ctx context.Context, in *GetRuleByRuleTypeReq, opts ...grpc.CallOption) (*GetRuleByRuleTypeResp, error) {
	out := new(GetRuleByRuleTypeResp)
	err := c.cc.Invoke(ctx, "/pb_mani.GinCenterService/GetRuleByRuleType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ginCenterServiceClient) GetRuleByCondition(ctx context.Context, in *GetRuleByConditionReq, opts ...grpc.CallOption) (*GetRuleByConditionResp, error) {
	out := new(GetRuleByConditionResp)
	err := c.cc.Invoke(ctx, "/pb_mani.GinCenterService/GetRuleByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ginCenterServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleReq, opts ...grpc.CallOption) (*UpdateRuleResp, error) {
	out := new(UpdateRuleResp)
	err := c.cc.Invoke(ctx, "/pb_mani.GinCenterService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ginCenterServiceClient) ExecuteRule(ctx context.Context, in *ExecuteRuleReq, opts ...grpc.CallOption) (*ExecuteRuleResp, error) {
	out := new(ExecuteRuleResp)
	err := c.cc.Invoke(ctx, "/pb_mani.GinCenterService/ExecuteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GinCenterServiceServer is the server API for GinCenterService service.
type GinCenterServiceServer interface {
	AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error)
	GetRuleByRuleType(context.Context, *GetRuleByRuleTypeReq) (*GetRuleByRuleTypeResp, error)
	GetRuleByCondition(context.Context, *GetRuleByConditionReq) (*GetRuleByConditionResp, error)
	UpdateRule(context.Context, *UpdateRuleReq) (*UpdateRuleResp, error)
	ExecuteRule(context.Context, *ExecuteRuleReq) (*ExecuteRuleResp, error)
}

// UnimplementedGinCenterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGinCenterServiceServer struct {
}

func (*UnimplementedGinCenterServiceServer) AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (*UnimplementedGinCenterServiceServer) GetRuleByRuleType(context.Context, *GetRuleByRuleTypeReq) (*GetRuleByRuleTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleByRuleType not implemented")
}
func (*UnimplementedGinCenterServiceServer) GetRuleByCondition(context.Context, *GetRuleByConditionReq) (*GetRuleByConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleByCondition not implemented")
}
func (*UnimplementedGinCenterServiceServer) UpdateRule(context.Context, *UpdateRuleReq) (*UpdateRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedGinCenterServiceServer) ExecuteRule(context.Context, *ExecuteRuleReq) (*ExecuteRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRule not implemented")
}

func RegisterGinCenterServiceServer(s *grpc.Server, srv GinCenterServiceServer) {
	s.RegisterService(&_GinCenterService_serviceDesc, srv)
}

func _GinCenterService_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GinCenterServiceServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_mani.GinCenterService/AddRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GinCenterServiceServer).AddRule(ctx, req.(*AddRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GinCenterService_GetRuleByRuleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleByRuleTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GinCenterServiceServer).GetRuleByRuleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_mani.GinCenterService/GetRuleByRuleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GinCenterServiceServer).GetRuleByRuleType(ctx, req.(*GetRuleByRuleTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GinCenterService_GetRuleByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleByConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GinCenterServiceServer).GetRuleByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_mani.GinCenterService/GetRuleByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GinCenterServiceServer).GetRuleByCondition(ctx, req.(*GetRuleByConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GinCenterService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GinCenterServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_mani.GinCenterService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GinCenterServiceServer).UpdateRule(ctx, req.(*UpdateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GinCenterService_ExecuteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GinCenterServiceServer).ExecuteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_mani.GinCenterService/ExecuteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GinCenterServiceServer).ExecuteRule(ctx, req.(*ExecuteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GinCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_mani.GinCenterService",
	HandlerType: (*GinCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRule",
			Handler:    _GinCenterService_AddRule_Handler,
		},
		{
			MethodName: "GetRuleByRuleType",
			Handler:    _GinCenterService_GetRuleByRuleType_Handler,
		},
		{
			MethodName: "GetRuleByCondition",
			Handler:    _GinCenterService_GetRuleByCondition_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _GinCenterService_UpdateRule_Handler,
		},
		{
			MethodName: "ExecuteRule",
			Handler:    _GinCenterService_ExecuteRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gin_mani_center.proto",
}
